안녕하세요 김도규입니다.
DirectX11로 Have a Nice Death 를 모작하였습니다. (개인 엔진 제작)

시작 화면 시 각 메뉴에 따라 방향키로 메뉴 선택이 가능하며,
해당 Index의 위치에 커서가 위치할때, 게임 플레이를 시작합니다.

Level Change 시 포스트 프로세스를 이용하여 원작과 동일하게 구현했습니다.

모든 오브젝트는 Material을 각각 제작하여 추가하였으며,
해당 오브젝트에 맞는 Shader Code를 각각 작성해서 적용했습니다.

FSM 패턴으로 Action별 State를 나누어
자연스러운 모션 전환이 이루어지게 하였으며,

Scipt를 추가하여 각 오브젝트에 맞는 트리거를 구현하였습니다.

플레이어의 스킬은 총 5가지 입니다.
스킬 및 이펙트는 해당 Material에 맞는 Collider를 생성해
오브젝트에 Component로 넣어주며, 충돌 범위를 설정했으며,

각 스킬별 데미지를 다르게 구현했습니다.

각 스테이지별 카메라는 플레이어를 중심으로 움직이며,
해당 배경의 사이즈를 계산하여 맵 밖으로 넘어가지 못하도록 설정했습니다.

레벨 전환은 Task Manager를 사용하여, 
해당 Level에 있는 오브젝트들의 Component를 Save-Load하도록 구현했습니다.

스테이지 2입니다.

Player가 서있는 지면(Platform)은, 플레이어와 충돌 시
해당 플랫폼의 Script 가 위치값을 Player Script로 전달합니다.

몬스터는 FSM 인공지능 시스템으로, 고유의 HP값을 갖고 있습니다.

AI를 통해 플레이어 감지 시 STATE가 자동으로 바뀌며
소리가 재생되며, 공격 감지범위 내 플레이어가 들어오면 공격을 합니다.

플레이어는 몬스터에게 피해를 입으면, 
몬스터의 고유 데미지에 따라 플레이어에게 입력되며

플레이어 HUD UI에서는 Script 를 추가하여 해당 몬스터의 데미지에 따라
Binding 되어 해당 쉐이더코드 내의 데미지만큼 텍스쳐의 UV값을 discard 시켜
UI Material의 HP 감소를 구현했습니다.

몬스터는 모두 감지범위 내 플레이어가 접근하면 
플레이어를 따라오도록 설계했습니다.


해당 몬스터는 공격 시 공격 이펙트인 흰색 텍스쳐에 
Bloom 효과와 Blur 효과를 추가하여, 

원작과 동일하게 불과 같은 시각적 효과를 주었습니다.

몬스터는 플레이어의 현재 위치를 식별하여
방향을 y값 기준으로 Rotation하여 방향전환합니다.

플레이어 대시 스킬 시 충돌을 예외처리하였습니다.


아이템은 습득 시, 플레이어 HP UI Material의
현재까지 Discard 된 UV값을 초기화하여 플레이어의 HP를 회복합니다.


보스 스테이지 입니다.


보스는 플레이어의 현재 위치에 따라 플레이어를 바라보며
감지범위에 들어오면 공격 패턴으로 전환합니다.

보스 이블펌킨은 총 3가지의 패턴을
rand함수를 통해 랜덤으로 사용합니다.
[srand time값 사용으로 패턴반복 해제]

보스의 공격패턴별 고유데미지를 다르게 설정했습니다.

보스의 HP는 플레이어의 각 스킬별 데미지에 따라 
UV값을 계산하여 구현하였습니다.

보스 클리어 후, 이제 게임 제작에서 구현한 ImGui Tool을 설명하겠습니다.

- Sprite Tool
원본 Atlas Texture에서 각 클릭 및 드래그 시, 
마우스 위치에 따라 Atlas Image에서, 해당 Sprite 크기만큼

- Animation Tool
각 스프라이트를 불러와, 새로운 FlipBook (Animation)으로 Save 및 Load 할수 있습니다.
